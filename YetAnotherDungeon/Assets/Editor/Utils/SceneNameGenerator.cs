using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using System.Linq;


// Used to grab all scene names and generate a class to store it
public class SceneNameGenerator : Editor
{
    [MenuItem("Tools/Generate Scene Names Class")]
    public static void Generate()
    {
        // Scene文件的路径
        string[] allScenePaths = AssetDatabase.FindAssets("t:Scene")
            .Select(guid => AssetDatabase.GUIDToAssetPath(guid))
            .ToArray();

        string[] scenePaths = allScenePaths.Where(path => path.StartsWith("Assets/Scene")).ToArray();

        foreach (var path in scenePaths)
        {
            Debug.Log(path);
        }

        // 类的内容
        StringBuilder classContent = new StringBuilder();
        classContent.AppendLine("public static class SceneNames");
        classContent.AppendLine("{");

        foreach (string scenePath in scenePaths)
        {
            string sceneName = Path.GetFileNameWithoutExtension(scenePath);
            classContent.AppendLine($"    public const string {MakeValidVariableName(sceneName)} = \"{sceneName}\";");
        }

        classContent.AppendLine("}");

        // 写入文件
        string folderPath = Path.Combine(Application.dataPath, "Scripts/AutoGenerated"); // 确保这个路径存在
        Directory.CreateDirectory(folderPath); // 如果文件夹不存在，则创建
        File.WriteAllText(Path.Combine(folderPath, "SceneNames.cs"), classContent.ToString());

        AssetDatabase.Refresh();
    }

    private static string MakeValidVariableName(string name)
    {
        // 这里简单地将不合法的字符替换成下划线，你可以根据需要进行更复杂的处理
        return string.Concat(name.Where(char.IsLetterOrDigit)).Replace(" ", "_");
    }
}